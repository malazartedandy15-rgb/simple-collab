<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Study Planner</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="planner-container">
        <header>
            <h1>Smart Study Planner</h1>
        </header>
        <main class="main-layout">
            <div class="calendar-section">
                <div class="calendar-header">
                    <button id="prev-month-btn">&lt;</button>
                    <h2 id="current-month-year"></h2>
                    <button id="next-month-btn">&gt;</button>
                </div>
                <div class="calendar">
                    <div class="weekdays">
                        <div>Sun</div>
                        <div>Mon</div>
                        <div>Tue</div>
                        <div>Wed</div>
                        <div>Thu</div>
                        <div>Fri</div>
                        <div>Sat</div>
                    </div>
                    <div class="days" id="calendar-days"></div>
                </div>
            </div>
            <div class="task-section">
                <h3>Add New Task</h3>
                <form id="add-task-form">
                    <input type="text" id="task-name" placeholder="Task Name (e.g., Final Exam)" required>
                    <input type="date" id="task-date" required>
                    <button type="submit">Add Task</button>
                </form>
                <h3>Upcoming Tasks</h3>
                <ul class="task-list" id="upcoming-tasks-list"></ul>
            </div>
        </main>
    </div>
    <script src="script.js"></script>
</body>
</html>


body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f7f9;
    margin: 0;
    padding: 20px;
    display: flex;
    justify-content: center;
}

.planner-container {
    max-width: 900px;
    width: 100%;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    padding: 25px;
}

header {
    text-align: center;
    margin-bottom: 20px;
}

.main-layout {
    display: flex;
    gap: 30px;
}

.calendar-section {
    flex: 2;
}

.task-section {
    flex: 1;
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 20px;
}

.calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.calendar-header button {
    background: #007bff;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
}

.calendar {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
}

.weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    text-align: center;
    font-weight: bold;
    color: #555;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
}

.days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
    padding-top: 10px;
}

.day {
    padding: 10px;
    text-align: center;
    border-radius: 5px;
    min-height: 40px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
}

.day.empty {
    background-color: #f9f9f9;
}

.day.has-task {
    background-color: #cce5ff;
    border: 1px solid #007bff;
}

.day.today {
    background-color: #007bff;
    color: white;
}

#add-task-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
}

#add-task-form input, #add-task-form button {
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

#add-task-form button {
    background-color: #28a745;
    color: white;
    border: none;
    cursor: pointer;
}

.task-list li {
    background-color: #fff;
    border: 1px solid #eee;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.delete-btn {
    background: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
}

document.addEventListener('DOMContentLoaded', () => {
    const currentMonthYearHeader = document.getElementById('current-month-year');
    const calendarDaysGrid = document.getElementById('calendar-days');
    const prevMonthBtn = document.getElementById('prev-month-btn');
    const nextMonthBtn = document.getElementById('next-month-btn');
    const form = document.getElementById('add-task-form');
    const taskNameInput = document.getElementById('task-name');
    const taskDateInput = document.getElementById('task-date');
    const upcomingTasksList = document.getElementById('upcoming-tasks-list');

    let currentDate = new Date();
    let tasks = JSON.parse(localStorage.getItem('study-tasks')) || [];

    function renderCalendar() {
        calendarDaysGrid.innerHTML = '';
        currentMonthYearHeader.textContent = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();
        const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();

        // Add empty cells for preceding days
        for (let i = 0; i < firstDayOfMonth; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.classList.add('day', 'empty');
            calendarDaysGrid.appendChild(emptyDay);
        }

        // Add days of the month
        for (let day = 1; day <= daysInMonth; day++) {
            const dayElement = document.createElement('div');
            dayElement.classList.add('day');
            dayElement.textContent = day;

            const fullDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            const formattedDate = fullDate.toISOString().split('T')[0];

            // Highlight today
            if (fullDate.toDateString() === new Date().toDateString()) {
                dayElement.classList.add('today');
            }

            // Highlight days with tasks
            if (tasks.some(task => task.date === formattedDate)) {
                dayElement.classList.add('has-task');
            }
            
            calendarDaysGrid.appendChild(dayElement);
        }
    }

    function renderUpcomingTasks() {
        upcomingTasksList.innerHTML = '';
        const sortedTasks = tasks.sort((a, b) => new Date(a.date) - new Date(b.date));
        sortedTasks.forEach((task, index) => {
            const listItem = document.createElement('li');
            listItem.innerHTML = `
                <span>${task.name} - ${task.date}</span>
                <button class="delete-btn" data-index="${index}">Delete</button>
            `;
            upcomingTasksList.appendChild(listItem);
        });
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', deleteTask);
        });
    }

    function addTask(e) {
        e.preventDefault();
        const taskName = taskNameInput.value.trim();
        const taskDate = taskDateInput.value;
        if (taskName && taskDate) {
            tasks.push({ name: taskName, date: taskDate });
            localStorage.setItem('study-tasks', JSON.stringify(tasks));
            taskNameInput.value = '';
            taskDateInput.value = '';
            renderCalendar();
            renderUpcomingTasks();
        }
    }

    function deleteTask(e) {
        const index = e.target.dataset.index;
        tasks.splice(index, 1);
        localStorage.setItem('study-tasks', JSON.stringify(tasks));
        renderCalendar();
        renderUpcomingTasks();
    }

    prevMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    });

    nextMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    });

    form.addEventListener('submit', addTask);

    renderCalendar();
    renderUpcomingTasks();
});
